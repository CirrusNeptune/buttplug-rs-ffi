syntax = "proto3";
package ButtplugFFIProtocols;

enum Endpoint {
  Tx = 0;
  Rx = 1;
  RxPressure = 2;
  RxTouch = 3;
  RxAccel = 4;
  Command = 5;
  Firmware = 6;
  TxMode = 7;
  TxVibrate = 8;
  TxShock = 9;
  TxVendorControl = 10;
  Whitelist = 11;
}

message ClientMessage {
  enum DeviceCommunicationManagerTypes {
    All = 0;
    Btleplug = 1;
    XInput = 2;
    SerialPort = 3;
    LovenseHIDDongle = 4;
    LovenseSerialDongle = 5;
  }

  message ConnectLocal {
    string server_name = 1;
    uint32 max_ping_time = 2;
    uint32 comm_manager_types = 3;
  }

  message ConnectWebsocket {
    string address = 1;
    bool bypass_cert_verification = 2;
  }

  message StartScanning {
  }

  message StopScanning {
  }

  message RequestDeviceList {
  }

  oneof msg {
    ConnectLocal connect_local = 1;
    ConnectWebsocket connect_websocket = 2;
    StartScanning start_scanning = 3;
    StopScanning stop_scanning = 4;
    RequestDeviceList request_device_list = 5;
  }
}

message DeviceMessage {
  message VibrateComponent {
    uint32 index = 1;
    double float = 2;
  }

  message VibrateCmd {
    repeated VibrateComponent speeds = 1;
  }

  message RotateComponent {
    uint32 index = 1;
    double speed = 2;
    bool clockwise = 3;
  }

  message RotateCmd {
    repeated RotateComponent rotations = 1;
  }

  message LinearComponent {
    uint32 index = 1;
    uint32 duration = 2;
    double position = 3;
  }

  message LinearCmd {
    repeated LinearComponent movements = 1;
  }

  message StopDeviceCmd {
    uint32 index = 1;
  }

  message RawReadCmd {
    uint32 index = 1;
    Endpoint endpoint = 2;
    bytes data = 3;
    uint32 expected_length = 4;
    uint32 timeout = 5;    
  }

  message RawWriteCmd {
    uint32 index = 1;
    Endpoint endpoint = 2;
    bytes data = 3;
    bool write_with_response = 4;
  }

  message RawSubscribeCmd {
    uint32 index = 1;
    Endpoint endpoint = 2;
  }

  message RawUnsubscribeCmd {
    uint32 index = 1;
    Endpoint endpoint = 2;
  }

  message BatteryLevelCmd {
    uint32 index = 1;
  }

  message RSSILevelCmd {
    uint32 index = 1;
  }

  message Message {
    oneof msg {
      VibrateCmd vibrate_cmd = 1;
      RotateCmd rotate_cmd = 2;
      LinearCmd linear_cmd = 3;
      StopDeviceCmd stop_device_cmd = 4;
      RawReadCmd raw_read_cmd =5;
      RawWriteCmd raw_write_cmd = 6;
      RawSubscribeCmd raw_subscribe_cmd = 7;
      RawUnsubscribeCmd raw_unsubscribe_cmd = 8;
      BatteryLevelCmd battery_level_cmd = 9;
      RSSILevelCmd rssi_level_cmd = 10;
    };
  }

  uint32 id = 1;
  Message msg = 2;
}

message ServerMessage {

  enum ButtplugErrorType {
    ButtplugConnectorError = 0;
    ButtplugHandshakeError = 1;
    ButtplugDeviceError = 2;
    ButtplugPingError = 3;
    ButtplugMessageError = 4;
    ButtplugUnknownError = 5;
  }
  
  enum MessageAttributeType {
    VibrateCmd = 0;
    RotateCmd = 1;
    LinearCmd = 2;
    StopDeviceCmd = 3;
    RawReadCmd = 4;
    RawWriteCmd = 5;
    RawSubscribeCmd = 6;
    RawUnsubscribeCmd = 7;
    BatteryLevelCmd = 8;
    RSSILevelCmd = 9;
  }
  
  message MessageAttributes {
    MessageAttributeType message_type = 1;
    uint32 feature_count = 2;
    repeated uint32 step_count = 3;
    repeated Endpoint endpoints = 4;
    repeated uint32 max_duration = 5;
    // TODO Patterns
    // TODO Actuator Type
  }

  message Ok {
  }

  message Error {
    ButtplugErrorType error_type = 1;
    string message = 2;
    string backtrace = 3;
  }

  message ScanningFinished {
  }

  message DeviceAdded {
    string name = 1;
    uint32 index = 2;
    repeated MessageAttributes message_attributes = 3;
  }

  message DeviceRemoved {
    uint32 index = 1;
  }
  
  message Message {
    oneof msg {
      Ok ok = 1;
      Error error = 2;
      ScanningFinished scanning_finished = 3;
      DeviceAdded device_added = 4;
      DeviceRemoved device_removed = 5;
    };
  }

  uint32 id = 1;
  Message msg = 2;
}

message DeviceEvent {
  message Disconnect {
    uint32 index = 1;
  }
  
  message BatteryLevelReading {
    uint32 index = 1;
    double reading = 2;
  }
  
  message RSSILevelReading {
    uint32 index = 1;
    double reading = 2;
  }
  
  message Message {
    oneof msg {
      Disconnect disconnect = 1;
      BatteryLevelReading battery_level_reading = 2;
      RSSILevelReading rssi_level_reading = 3;
    };  
  }

  uint32 id = 1;
  Message msg = 2;
}